// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

// model Example {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model PrismaPost {
//   id       String       @id @default(auto()) @map("_id") @db.ObjectId
//   title    String
//   body     String
//   author   PrismaAuthor @relation(fields: [authorId], references: [id])
//   authorId String       @db.ObjectId
// }

// model PrismaAuthor {
//   id    String       @id @default(auto()) @map("_id") @db.ObjectId
//   name  String
//   posts PrismaPost[]
// }
// Necessary for Next auth

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum UserPlan {
  FREE
  PLUS
  PRO
  ELITE
}

enum WalletChain {
  ETH
  BEP20
  SOL
  NEAR
  AVAX
}

model User {
  id             String                @id @default(auto()) @map("_id") @db.ObjectId
  username       String?               @unique
  name           String?
  credential     Credential[]
  role           Role                  @default(USER)
  plan           UserPlan              @default(FREE)
  subscriptionId String?
  subscription   CustomerSubscription?
  email          String                @unique
  emailVerified  DateTime?
  createdAt      DateTime              @default(now()) @db.Timestamp
  image          String?
  accounts       Account[]
  wallets        Wallet[]
  sessions       Session[]
  notifications  Notification[]
  purchase       Purchase[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  metadata          Json    @default("{}")
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Credential {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String @unique
  password String
  user     User   @relation(fields: [email], references: [email], onDelete: Cascade)
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Timestamp
  isRead    Boolean
  title     String
  text      String
  link      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wallet {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now()) @db.Timestamp
  address   String
  title     String
  text      String
  chain     WalletChain
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CustomerSubscription {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String    @unique @db.ObjectId
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  metadata           Json
  status             String?
  price              Int
  productId          String    @db.ObjectId
  product            Product   @relation(fields: [productId], references: [id])
  cancelAtPeriodEnd  Boolean
  cancelAt           DateTime?
  canceledAt         DateTime?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt          DateTime
  endedAt            DateTime?
  updatedAt          DateTime?
}

model Product {
  id                    String                 @id @default(auto()) @map("_id") @db.ObjectId
  active                Boolean
  name                  String
  description           String?
  metadata              Json
  defaultPriceId        String?
  price                 Int
  customerSubscriptions CustomerSubscription[]
  purchases             Purchase[]
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  customer  User     @relation(fields: [userId], references: [id])
  productId String   @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  status    String?
  createdAt DateTime @default(now())
}
