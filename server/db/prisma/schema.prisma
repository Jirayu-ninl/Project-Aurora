// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// model PrismaPost {
//   id       String       @id @default(auto()) @map("_id") @db.ObjectId
//   title    String
//   body     String
//   author   PrismaAuthor @relation(fields: [authorId], references: [id])
//   authorId String       @db.ObjectId
// }

// model PrismaAuthor {
//   id    String       @id @default(auto()) @map("_id") @db.ObjectId
//   name  String
//   posts PrismaPost[]
// }
// Necessary for Next auth

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum UserPlan {
  FREE
  PLUS
  PRO
  ELITE
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  username      String?        @unique
  name          String?
  password      String?
  role          Role           @default(USER)
  plan          UserPlan       @default(FREE)
  email         String         @unique
  emailVerified DateTime?
  createdAt     DateTime       @default(now()) @db.Timestamp
  image         String?
  accounts      Account[]
  sessions      Session[]
  Notifications Notification[]
  Carts         Cart[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now()) @db.Timestamp
  isRead    Boolean
  title     String
  text      String
  link      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  itemId    String   @unique
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt
  name      String
  link      String
  quantity  Int
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
